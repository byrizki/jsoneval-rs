name: Build Bindings

on:
  push:
    branches: [ main, develop ]
  release:
    types: [ created ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build native libraries for all platforms
  build-native:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libjson_eval_rs.so
            build_features: ffi
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: json_eval_rs.dll
            build_features: ffi
          
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: libjson_eval_rs.dylib
            build_features: ffi
          
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: libjson_eval_rs.dylib
            build_features: ffi
          
          # iOS ARM64 (device)
          - os: macos-latest
            target: aarch64-apple-ios
            artifact_name: libjson_eval_rs.a
            build_features: ffi
          
          # iOS ARM64 (simulator - Apple Silicon Mac)
          - os: macos-latest
            target: aarch64-apple-ios-sim
            artifact_name: libjson_eval_rs.a
            build_features: ffi
          
          # iOS x86_64 (simulator - Intel Mac)
          - os: macos-latest
            target: x86_64-apple-ios
            artifact_name: libjson_eval_rs.a
            build_features: ffi

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build native library
      run: cargo build --release --target ${{ matrix.target }} --features ${{ matrix.build_features }}
    
    - name: Upload native library artifact
      uses: actions/upload-artifact@v4
      with:
        name: native-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        if-no-files-found: error

  # Build C# NuGet package
  build-csharp:
    needs: build-native
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          6.0.x
    
    - name: Download Linux native library
      uses: actions/download-artifact@v4
      with:
        name: native-x86_64-unknown-linux-gnu
        path: target/x86_64-unknown-linux-gnu/release/
    
    - name: Download Windows native library
      uses: actions/download-artifact@v4
      with:
        name: native-x86_64-pc-windows-msvc
        path: target/x86_64-pc-windows-msvc/release/
    
    - name: Download macOS x64 native library
      uses: actions/download-artifact@v4
      with:
        name: native-x86_64-apple-darwin
        path: target/x86_64-apple-darwin/release/
    
    - name: Download macOS ARM64 native library
      uses: actions/download-artifact@v4
      with:
        name: native-aarch64-apple-darwin
        path: target/aarch64-apple-darwin/release/
    
    - name: Build NuGet package
      run: |
        cd bindings/csharp
        dotnet pack -c Release
    
    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: bindings/csharp/bin/Release/*.nupkg
        if-no-files-found: error

  # Build Web/WASM package
  build-web:
    runs-on: ubuntu-latest
    
    env:
      RUSTFLAGS: "--cfg=getrandom_backend=\"wasm_js\""
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build WASM for bundler
      run: wasm-pack build --target bundler --out-dir bindings/web/packages/bundler/pkg --features wasm
    
    - name: Build WASM for Node.js
      run: wasm-pack build --target nodejs --out-dir bindings/web/packages/node/pkg --features wasm
    
    - name: Install web dependencies
      run: |
        cd bindings/web
        yarn install
    
    - name: Package web binding
      run: |
        cd bindings/web
        npm pack
    
    - name: Upload web package
      uses: actions/upload-artifact@v4
      with:
        name: web-package
        path: bindings/web/*.tgz
        if-no-files-found: error
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-modules
        path: |
          bindings/web/packages/bundler/pkg/
          bindings/web/packages/node/pkg/

  # Build Android JNI libraries
  build-android-jni:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - arm64-v8a
          - armeabi-v7a
          - x86
          - x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26c
        add-to-path: true
      id: setup-ndk
    
    - name: Install Android Rust targets
      run: |
        rustup target add \
          aarch64-linux-android \
          armv7-linux-androideabi \
          i686-linux-android \
          x86_64-linux-android
    
    - name: Add NDK toolchain to PATH
      run: |
        NDK_HOME="${{ steps.setup-ndk.outputs.ndk-path }}"
        echo "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
        echo "NDK toolchain added to PATH"
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-android-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Map Android ABI to Rust target
      id: rust-target
      run: |
        case "${{ matrix.target }}" in
          arm64-v8a)
            echo "target=aarch64-linux-android" >> $GITHUB_OUTPUT
            ;;
          armeabi-v7a)
            echo "target=armv7-linux-androideabi" >> $GITHUB_OUTPUT
            ;;
          x86)
            echo "target=i686-linux-android" >> $GITHUB_OUTPUT
            ;;
          x86_64)
            echo "target=x86_64-linux-android" >> $GITHUB_OUTPUT
            ;;
        esac
    
    - name: Build Rust shared library
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo build --release --target ${{ steps.rust-target.outputs.target }} --features ffi
    
    - name: Verify shared library
      run: |
        ls -lh target/${{ steps.rust-target.outputs.target }}/release/libjson_eval_rs.so
    
    - name: Copy to jniLibs directory
      run: |
        mkdir -p bindings/react-native/packages/react-native/android/src/main/jniLibs/${{ matrix.target }}
        cp target/${{ steps.rust-target.outputs.target }}/release/libjson_eval_rs.so \
           bindings/react-native/packages/react-native/android/src/main/jniLibs/${{ matrix.target }}/
        ls -lh bindings/react-native/packages/react-native/android/src/main/jniLibs/${{ matrix.target }}/
    
    - name: Upload Android JNI library artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-jni-${{ matrix.target }}
        path: bindings/react-native/packages/react-native/android/src/main/jniLibs/${{ matrix.target }}/
        if-no-files-found: error
  
  # Build React Native package
  build-react-native:
    needs: [build-native, build-android-jni]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Download Android JNI libraries
      uses: actions/download-artifact@v4
      with:
        pattern: android-jni-*
        path: android-jni-artifacts/
    
    - name: Organize Android JNI libraries
      run: |
        # Copy Android JNI artifacts to the package structure
        mkdir -p bindings/react-native/packages/react-native/android/src/main/jniLibs
        
        # Copy each ABI's libraries (contents only, not the directory)
        for abi_dir in android-jni-artifacts/android-jni-*/; do
          if [ -d "$abi_dir" ]; then
            abi=$(basename "$abi_dir" | sed 's/android-jni-//')
            echo "Copying $abi libraries..."
            mkdir -p bindings/react-native/packages/react-native/android/src/main/jniLibs/$abi
            cp "$abi_dir"/*.so bindings/react-native/packages/react-native/android/src/main/jniLibs/$abi/ 2>/dev/null || true
          fi
        done
        
        # Verify libraries
        echo "Android JNI libraries bundled in package:"
        find bindings/react-native/packages/react-native/android/src/main/jniLibs -name "*.so" -exec ls -lh {} \;
    
    - name: Download and organize iOS libraries
      uses: actions/download-artifact@v4
      with:
        pattern: native-*-apple-ios
        path: ios-artifacts/
    
    - name: Organize iOS libraries
      run: |
        # Create iOS libs directory in the package
        mkdir -p bindings/react-native/packages/react-native/ios/libs
        
        # Track which architectures we have
        HAS_ARM64=false
        HAS_X86_64=false
        HAS_ARM64_SIM=false
        
        # Copy architecture-specific libraries
        if [ -d "ios-artifacts/native-aarch64-apple-ios" ]; then
          mkdir -p bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios
          cp ios-artifacts/native-aarch64-apple-ios/libjson_eval_rs.a \
             bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios/ 2>/dev/null || true
          HAS_ARM64=true
          echo "✓ Copied iOS arm64 (device) library"
        fi
        
        if [ -d "ios-artifacts/native-x86_64-apple-ios" ]; then
          mkdir -p bindings/react-native/packages/react-native/ios/libs/x86_64-apple-ios
          cp ios-artifacts/native-x86_64-apple-ios/libjson_eval_rs.a \
             bindings/react-native/packages/react-native/ios/libs/x86_64-apple-ios/ 2>/dev/null || true
          HAS_X86_64=true
          echo "✓ Copied iOS x86_64 (simulator) library"
        fi
        
        if [ -d "ios-artifacts/native-aarch64-apple-ios-sim" ]; then
          mkdir -p bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios-sim
          cp ios-artifacts/native-aarch64-apple-ios-sim/libjson_eval_rs.a \
             bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios-sim/ 2>/dev/null || true
          HAS_ARM64_SIM=true
          echo "✓ Copied iOS arm64 (simulator) library"
        fi
        
        echo ""
        echo "iOS static libraries bundled in package:"
        find bindings/react-native/packages/react-native/ios/libs -name "*.a" -exec ls -lh {} \;
    
    - name: Install React Native dependencies
      run: |
        cd bindings/react-native
        yarn install
    
    - name: Build TypeScript
      run: |
        cd bindings/react-native
        npm run prepare || echo "Prepare script not found, skipping"
    
    - name: Install example dependencies
      run: |
        cd bindings/react-native/examples/rncli
        yarn install || echo "Example dependencies installation skipped"
    
    - name: Package React Native binding
      run: |
        cd bindings/react-native
        npm pack
    
    - name: Upload React Native package
      uses: actions/upload-artifact@v4
      with:
        name: react-native-package
        path: bindings/react-native/*.tgz
        if-no-files-found: error

  # Run tests
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: cargo test --all-features
    
    - name: Run tests (release mode)
      run: cargo test --release --all-features

  # Create release with all artifacts
  create-release:
    if: github.event_name == 'release'
    needs: [build-native, build-android-jni, build-csharp, build-web, build-react-native, test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
    
    - name: Create release archives
      run: |
        cd release-artifacts
        
        # Archive native libraries
        tar -czf native-linux-x64.tar.gz native-x86_64-unknown-linux-gnu/
        tar -czf native-windows-x64.tar.gz native-x86_64-pc-windows-msvc/
        tar -czf native-macos-x64.tar.gz native-x86_64-apple-darwin/
        tar -czf native-macos-arm64.tar.gz native-aarch64-apple-darwin/
        
        # Archive WASM modules
        tar -czf wasm-modules.tar.gz wasm-modules/
    
    - name: Upload release archives
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-artifacts/*.tar.gz
          release-artifacts/nuget-package/*.nupkg
          release-artifacts/web-package/*.tgz
          release-artifacts/react-native-package/*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job
  summary:
    if: always()
    needs: [build-native, build-android-jni, build-csharp, build-web, build-react-native, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Native Libraries" >> $GITHUB_STEP_SUMMARY
        echo "✅ Desktop platforms (Linux, Windows, macOS)" >> $GITHUB_STEP_SUMMARY
        echo "✅ iOS (device & simulator)" >> $GITHUB_STEP_SUMMARY
        echo "✅ Android (arm64-v8a, armeabi-v7a, x86, x86_64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Bindings Packages" >> $GITHUB_STEP_SUMMARY
        echo "✅ C# NuGet package created" >> $GITHUB_STEP_SUMMARY
        echo "✅ Web/WASM package created" >> $GITHUB_STEP_SUMMARY
        echo "✅ React Native package created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tests" >> $GITHUB_STEP_SUMMARY
        echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All artifacts are available for download from this workflow run." >> $GITHUB_STEP_SUMMARY
