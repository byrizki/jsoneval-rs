name: Publish Packages

on:
  # Trigger after build-bindings workflow completes successfully
  workflow_run:
    workflows: ["Build Bindings"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish from (e.g., v0.0.27)'
        required: true
        type: string
      publish_csharp:
        description: 'Publish C# NuGet package'
        required: false
        type: boolean
        default: true
      publish_web:
        description: 'Publish Web npm package'
        required: false
        type: boolean
        default: true
      publish_react_native:
        description: 'Publish React Native npm package'
        required: false
        type: boolean
        default: true
      publish_crates_io:
        description: 'Publish Rust crate to crates.io'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if workflow_run was successful before proceeding
  check-workflow:
    if: github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get-tag.outputs.tag }}
      should_run: ${{ steps.check.outputs.should_run }}
    
    steps:
    - name: Check workflow_run conclusion
      id: check
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "Build Bindings workflow did not succeed. Skipping publish."
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Get release tag
      id: get-tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        else
          # For workflow_run, get the latest release tag
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [ "$TAG" = "null" ] || [ -z "$TAG" ]; then
            echo "No release found"
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        fi
        echo "Release tag: ${{ steps.get-tag.outputs.tag }}"
  
  # Download pre-built packages from GitHub Release
  download-release-assets:
    needs: check-workflow
    if: needs.check-workflow.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download release assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG="${{ needs.check-workflow.outputs.release_tag }}"
        echo "Downloading assets from release: $TAG"
        
        # Create download directory
        mkdir -p release-assets
        cd release-assets
        
        # Download all release assets
        gh release download "$TAG" --pattern "*.nupkg" || echo "No .nupkg files"
        gh release download "$TAG" --pattern "*.tgz" || echo "No .tgz files"
        gh release download "$TAG" --pattern "*.tar.gz" || echo "No .tar.gz files"
    
    - name: List downloaded assets
      run: |
        echo "Downloaded release assets:"
        ls -lh release-assets/
    
    - name: Re-upload as workflow artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: release-assets/

  # Publish C# NuGet package (using pre-built package from release)
  publish-csharp:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_csharp == 'true')
    needs: [check-workflow, download-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Publish to NuGet
      run: |
        NUPKG=$(find packages -name "*.nupkg" | head -n 1)
        if [ -z "$NUPKG" ]; then
          echo "❌ No NuGet package found in release"
          exit 1
        fi
        
        echo "Publishing: $NUPKG"
        dotnet nuget push "$NUPKG" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  # Publish Web npm packages (using pre-built packages from release)
  publish-web:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_web == 'true')
    needs: [check-workflow, download-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Publish web packages to npm
      run: |
        # Find and publish all web-related .tgz packages
        for pkg in packages/*-core-*.tgz packages/*-bundler-*.tgz packages/*-node-*.tgz; do
          if [ -f "$pkg" ]; then
            echo "Publishing: $(basename $pkg)"
            npm publish "$pkg" --access public
          fi
        done
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish React Native npm package (using pre-built package from release)
  publish-react-native:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_react_native == 'true')
    needs: [check-workflow, download-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Publish React Native package to npm
      run: |
        RN_PKG=$(find packages -name "*react-native*.tgz" | head -n 1)
        if [ -z "$RN_PKG" ]; then
          echo "❌ No React Native package found in release"
          exit 1
        fi
        
        echo "Publishing: $(basename $RN_PKG)"
        npm publish "$RN_PKG" --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish Rust crate to crates.io
  publish-crates-io:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_crates_io == 'true')
    needs: [check-workflow]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Summary
  publish-summary:
    if: always()
    needs: [check-workflow, download-release-assets, publish-csharp, publish-web, publish-react-native, publish-crates-io]
    runs-on: ubuntu-latest
    
    steps:
    - name: Publish Summary
      run: |
        echo "## 📦 Publish Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Tag" >> $GITHUB_STEP_SUMMARY
        echo "📦 **${{ needs.check-workflow.outputs.release_tag }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| C# NuGet | ${{ needs.publish-csharp.result == 'success' && '✅' || needs.publish-csharp.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web npm | ${{ needs.publish-web.result == 'success' && '✅' || needs.publish-web.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| React Native npm | ${{ needs.publish-react-native.result == 'success' && '✅' || needs.publish-react-native.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Rust crates.io | ${{ needs.publish-crates-io.result == 'success' && '✅' || needs.publish-crates-io.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Note" >> $GITHUB_STEP_SUMMARY
        echo "All packages are published from pre-built artifacts in GitHub Release ${{ needs.check-workflow.outputs.release_tag }}." >> $GITHUB_STEP_SUMMARY
