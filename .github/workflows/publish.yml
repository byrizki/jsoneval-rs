name: Publish Packages

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      publish_csharp:
        description: 'Publish C# NuGet package'
        required: false
        type: boolean
        default: false
      publish_web:
        description: 'Publish Web npm package'
        required: false
        type: boolean
        default: false
      publish_react_native:
        description: 'Publish React Native npm package'
        required: false
        type: boolean
        default: false
      publish_crates_io:
        description: 'Publish Rust crate to crates.io'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # Download pre-built artifacts from build-bindings workflow
  download-artifacts:
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.get-run.outputs.run-id }}
    
    steps:
    - name: Get latest successful build-bindings workflow run
      id: get-run
      uses: actions/github-script@v7
      with:
        script: |
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-bindings.yml',
            status: 'success',
            branch: 'main',
            per_page: 1
          });
          
          if (runs.data.workflow_runs.length === 0) {
            core.setFailed('No successful build-bindings workflow run found');
            return;
          }
          
          const runId = runs.data.workflow_runs[0].id;
          core.setOutput('run-id', runId);
          console.log(`Found workflow run: ${runId}`);
    
    - name: Download all artifacts from build-bindings
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ steps.get-run.outputs.run-id }}
        path: downloaded-artifacts/
    
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -R downloaded-artifacts/
    
    - name: Re-upload native artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-native-artifacts
        path: downloaded-artifacts/

  # Publish C# NuGet package
  publish-csharp:
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') ||
      github.event.inputs.publish_csharp == 'true'
    needs: download-artifacts
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          6.0.x
    
    - name: Download artifacts from previous job
      uses: actions/download-artifact@v4
      with:
        name: all-native-artifacts
        path: artifacts/
    
    - name: Organize native libraries
      run: |
        # Create native library directories for C# bindings
        mkdir -p bindings/csharp/runtimes/linux-x64/native
        mkdir -p bindings/csharp/runtimes/win-x64/native
        mkdir -p bindings/csharp/runtimes/osx-x64/native
        mkdir -p bindings/csharp/runtimes/osx-arm64/native
        
        # Extract from downloaded structure (artifacts contain subdirs from build-bindings)
        find artifacts -name "libjson_eval_rs.so" -path "*/native-x86_64-unknown-linux-gnu/*" -exec cp {} bindings/csharp/runtimes/linux-x64/native/ \; || true
        find artifacts -name "json_eval_rs.dll" -path "*/native-x86_64-pc-windows-msvc/*" -exec cp {} bindings/csharp/runtimes/win-x64/native/ \; || true
        find artifacts -name "libjson_eval_rs.dylib" -path "*/native-x86_64-apple-darwin/*" -exec cp {} bindings/csharp/runtimes/osx-x64/native/ \; || true
        find artifacts -name "libjson_eval_rs.dylib" -path "*/native-aarch64-apple-darwin/*" -exec cp {} bindings/csharp/runtimes/osx-arm64/native/ \; || true
    
    - name: Verify native libraries copied
      run: |
        echo "Checking native libraries in bindings/csharp/runtimes/..."
        echo ""
        echo "Linux x64:"
        ls -lh bindings/csharp/runtimes/linux-x64/native/*.so 2>/dev/null || echo "  ⚠ Not found"
        echo ""
        echo "Windows x64:"
        ls -lh bindings/csharp/runtimes/win-x64/native/*.dll 2>/dev/null || echo "  ⚠ Not found"
        echo ""
        echo "macOS x64:"
        ls -lh bindings/csharp/runtimes/osx-x64/native/*.dylib 2>/dev/null || echo "  ⚠ Not found"
        echo ""
        echo "macOS ARM64:"
        ls -lh bindings/csharp/runtimes/osx-arm64/native/*.dylib 2>/dev/null || echo "  ⚠ Not found"
    
    - name: Build C# project
      run: |
        cd bindings/csharp
        dotnet build -c Release
    
    - name: Pack NuGet package
      run: |
        cd bindings/csharp
        dotnet pack -c Release --no-build -v detailed 2>&1 | tee pack.log
        echo ""
        echo "Checking pack log for native libraries..."
        grep -i "libjson_eval_rs\|json_eval_rs" pack.log || echo "⚠ No native library references in pack log"
    
    - name: Verify NuGet package contents
      run: |
        cd bindings/csharp/bin/Release
        NUPKG=$(ls *.nupkg | head -n 1)
        echo "Inspecting NuGet package: $NUPKG"
        echo ""
        echo "Native libraries in package:"
        unzip -l "$NUPKG" | grep -E 'runtimes.*\.(dll|so|dylib)$' || echo "⚠ No native libraries found in package!"
        echo ""
        echo "Full runtimes folder structure:"
        unzip -l "$NUPKG" | grep "runtimes/" || echo "No runtimes folder"
    
    - name: Publish to NuGet
      run: |
        cd bindings/csharp
        dotnet nuget push bin/Release/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    
    - name: Upload NuGet package artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: bindings/csharp/bin/Release/*.nupkg

  # Publish Web npm package
  publish-web:
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') ||
      github.event.inputs.publish_web == 'true'
    runs-on: ubuntu-latest
    
    env:
      RUSTFLAGS: "--cfg=getrandom_backend=\"wasm_js\""
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM packages
      run: |
        wasm-pack build --target bundler --out-dir bindings/web/packages/bundler/pkg --features wasm
        wasm-pack build --target nodejs --out-dir bindings/web/packages/node/pkg --features wasm
    
    - name: Install dependencies
      run: |
        cd bindings/web
        yarn install
    
    - name: Remove pkg .gitignore files
      run: |
        # wasm-pack generates .gitignore files that can prevent npm publish from including WASM files
        rm -f bindings/web/packages/bundler/pkg/.gitignore
        rm -f bindings/web/packages/node/pkg/.gitignore
        echo "✓ Removed .gitignore files from pkg directories"
    
    - name: Publish core package to npm
      run: |
        cd bindings/web/packages/core
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish bundler package to npm
      run: |
        cd bindings/web/packages/bundler
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish node package to npm
      run: |
        cd bindings/web/packages/node
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create package artifacts
      run: |
        cd bindings/web/packages/core && npm pack
        cd ../bundler && npm pack
        cd ../node && npm pack
    
    - name: Upload web package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-packages
        path: |
          bindings/web/packages/core/*.tgz
          bindings/web/packages/bundler/*.tgz
          bindings/web/packages/node/*.tgz

  # Publish React Native npm package
  publish-react-native:
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') ||
      github.event.inputs.publish_react_native == 'true'
    needs: download-artifacts
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Download artifacts from previous job
      uses: actions/download-artifact@v4
      with:
        name: all-native-artifacts
        path: artifacts/
    
    - name: Organize native libraries
      run: |
        # Create iOS framework directory
        mkdir -p bindings/react-native/packages/react-native/ios/libs
        
        # Create Android JNI directory
        mkdir -p bindings/react-native/packages/react-native/android/src/main/jniLibs
        
        # Copy iOS libraries from downloaded artifacts
        find artifacts -name "libjson_eval_rs.a" -path "*/native-aarch64-apple-ios/*" -exec mkdir -p bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios \; -exec cp {} bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios/ \; || true
        find artifacts -name "libjson_eval_rs.a" -path "*/native-x86_64-apple-ios/*" -exec mkdir -p bindings/react-native/packages/react-native/ios/libs/x86_64-apple-ios \; -exec cp {} bindings/react-native/packages/react-native/ios/libs/x86_64-apple-ios/ \; || true
        find artifacts -name "libjson_eval_rs.a" -path "*/native-aarch64-apple-ios-sim/*" -exec mkdir -p bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios-sim \; -exec cp {} bindings/react-native/packages/react-native/ios/libs/aarch64-apple-ios-sim/ \; || true
        
        # Copy Android JNI libraries from downloaded artifacts (organized by ABI)
        for abi in arm64-v8a armeabi-v7a x86 x86_64; do
          if find artifacts -path "*/android-jni-${abi}/*" -name "*.so" 2>/dev/null | grep -q .; then
            mkdir -p bindings/react-native/packages/react-native/android/src/main/jniLibs/${abi}
            find artifacts -path "*/android-jni-${abi}/*" -name "*.so" -exec cp {} bindings/react-native/packages/react-native/android/src/main/jniLibs/${abi}/ \;
            echo "✓ Copied Android ${abi} libraries"
          fi
        done
        
        echo ""
        echo "Native libraries organized for React Native:"
        echo "iOS libraries:"
        find bindings/react-native/packages/react-native/ios/libs -name "*.a" -exec ls -lh {} \; || echo "No iOS libraries found"
        echo ""
        echo "Android JNI libraries:"
        find bindings/react-native/packages/react-native/android/src/main/jniLibs -name "*.so" -exec ls -lh {} \; || echo "No Android libraries found"
    
    - name: Install dependencies
      run: |
        cd bindings/react-native
        yarn install
    
    - name: Build TypeScript
      run: |
        cd bindings/react-native
        yarn workspace @json-eval-rs/react-native prepare
    
    - name: Publish to npm
      run: |
        cd bindings/react-native/packages/react-native
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create package artifact
      run: |
        cd bindings/react-native/packages/react-native
        npm pack
    
    - name: Upload React Native package artifact
      uses: actions/upload-artifact@v4
      with:
        name: react-native-package
        path: bindings/react-native/packages/react-native/*.tgz

  # Publish Rust crate to crates.io
  publish-crates-io:
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') ||
      github.event.inputs.publish_crates_io == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Run tests
      run: cargo test --all-features
    
    - name: Check package
      run: cargo publish --dry-run
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Create GitHub Release
  create-github-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [download-artifacts, publish-csharp, publish-web, publish-react-native, publish-crates-io]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        ## 🚀 Release ${{ steps.version.outputs.VERSION }}
        
        ### 📦 Published Packages
        
        - **Rust Crate**: [crates.io/crates/json-eval-rs](https://crates.io/crates/json-eval-rs)
        - **C# NuGet**: [nuget.org/packages/JsonEvalRs](https://www.nuget.org/packages/JsonEvalRs)
        - **Web (npm)**:
          - Core: [npmjs.com/package/@json-eval-rs/core](https://www.npmjs.com/package/@json-eval-rs/core)
          - Bundler: [npmjs.com/package/@json-eval-rs/bundler](https://www.npmjs.com/package/@json-eval-rs/bundler)
          - Node.js: [npmjs.com/package/@json-eval-rs/node](https://www.npmjs.com/package/@json-eval-rs/node)
        - **React Native (npm)**: [npmjs.com/package/@json-eval-rs/react-native](https://www.npmjs.com/package/@json-eval-rs/react-native)
        
        ### 📥 Installation
        
        **Rust:**
        ```bash
        cargo add json-eval-rs
        ```
        
        **C#:**
        ```bash
        dotnet add package JsonEvalRs
        ```
        
        **Web:**
        ```bash
        yarn install @json-eval-rs/web
        ```
        
        **React Native:**
        ```bash
        yarn install @json-eval-rs/react-native
        ```
        
        ### 📝 Changes
        
        See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        
        ### 🔧 Native Libraries
        
        Pre-built native libraries for all platforms:
        - **Desktop**: Linux, Windows, macOS (x64 & ARM64)
        - **iOS**: Device (ARM64) & Simulator (x64)
        - **Android**: arm64-v8a, armeabi-v7a, x86, x86_64
        
        All native libraries are attached to this release.
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          release-artifacts/nuget-package/*.nupkg
          release-artifacts/web-packages/*.tgz
          release-artifacts/react-native-package/*.tgz
          release-artifacts/native-*/*
          release-artifacts/android-jni-*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary
  publish-summary:
    if: always()
    needs: [download-artifacts, publish-csharp, publish-web, publish-react-native, publish-crates-io]
    runs-on: ubuntu-latest
    
    steps:
    - name: Publish Summary
      run: |
        echo "## 📦 Publish Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Download from build-bindings | ${{ needs.download-artifacts.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| C# NuGet | ${{ needs.publish-csharp.result == 'success' && '✅' || needs.publish-csharp.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web npm | ${{ needs.publish-web.result == 'success' && '✅' || needs.publish-web.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| React Native npm | ${{ needs.publish-react-native.result == 'success' && '✅' || needs.publish-react-native.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Rust crates.io | ${{ needs.publish-crates-io.result == 'success' && '✅' || needs.publish-crates-io.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Note" >> $GITHUB_STEP_SUMMARY
        echo "Native libraries are reused from the latest successful build-bindings workflow run." >> $GITHUB_STEP_SUMMARY
