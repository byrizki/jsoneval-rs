name: Publish Packages

on:
  # Trigger after build-bindings workflow completes successfully
  workflow_run:
    workflows: ["Build Bindings"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish from (e.g., v0.0.28)'
        required: true
        type: string
      publish_csharp:
        description: 'Publish C# NuGet package'
        required: false
        type: boolean
        default: true
      publish_web:
        description: 'Publish Web npm package'
        required: false
        type: boolean
        default: true
      publish_react_native:
        description: 'Publish React Native npm package'
        required: false
        type: boolean
        default: true
      publish_crates_io:
        description: 'Publish Rust crate to crates.io'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if workflow_run was successful before proceeding
  check-workflow:
    if: github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get-tag.outputs.tag }}
      should_run: ${{ steps.check.outputs.should_run }}
    
    steps:
    - name: Check workflow_run conclusion
      id: check
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "Build Bindings workflow did not succeed. Skipping publish."
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Get release tag
      id: get-tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.release_tag }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Using manually specified release tag: $TAG"
        else
          # For workflow_run, get the latest release tag
          echo "üîç Looking for latest release..."
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [ "$TAG" = "null" ] || [ -z "$TAG" ]; then
            echo "‚ùå ERROR: No release found in the repository"
            echo ""
            echo "To publish packages, you need to:"
            echo "1. Create a GitHub Release (e.g., v0.0.28)"
            echo "2. Run the 'Build Bindings' workflow to upload packages to that release"
            echo "3. Then run this publish workflow"
            echo ""
            echo "Or use workflow_dispatch and manually specify the release tag."
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Found latest release: $TAG"
        fi
  
  # Download pre-built packages from GitHub Release
  download-release-assets:
    needs: check-workflow
    if: needs.check-workflow.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify release exists
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG="${{ needs.check-workflow.outputs.release_tag }}"
        echo "Checking if release $TAG exists..."
        
        if ! gh release view "$TAG" > /dev/null 2>&1; then
          echo "‚ùå ERROR: Release $TAG does not exist"
          echo "Available releases:"
          gh release list --limit 5
          exit 1
        fi
        
        echo "‚úÖ Release $TAG found"
        echo ""
        echo "Release info:"
        gh release view "$TAG"
    
    - name: Download release assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG="${{ needs.check-workflow.outputs.release_tag }}"
        echo "Downloading assets from release: $TAG"
        
        # Create download directory
        mkdir -p release-assets
        cd release-assets
        
        # Download all release assets
        echo "Downloading .nupkg files..."
        gh release download "$TAG" --pattern "*.nupkg" || echo "‚ö†Ô∏è No .nupkg files found"
        
        echo "Downloading .tgz files..."
        gh release download "$TAG" --pattern "*.tgz" || echo "‚ö†Ô∏è No .tgz files found"
        
        echo "Downloading .tar.gz files..."
        gh release download "$TAG" --pattern "*.tar.gz" || echo "‚ö†Ô∏è No .tar.gz files found"
    
    - name: Verify downloaded assets
      id: verify
      run: |
        echo "Downloaded release assets:"
        ls -lh release-assets/ || true
        
        # Check if any files were downloaded
        FILE_COUNT=$(find release-assets -type f | wc -l)
        echo "Total files downloaded: $FILE_COUNT"
        
        if [ "$FILE_COUNT" -eq 0 ]; then
          echo "‚ùå ERROR: No release assets were found in release ${{ needs.check-workflow.outputs.release_tag }}"
          echo "Make sure the Build Bindings workflow has completed and uploaded assets to the release."
          exit 1
        fi
        
        echo "‚úÖ Found $FILE_COUNT release asset(s)"
    
    - name: Re-upload as workflow artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: release-assets/

  # Publish C# NuGet package (using pre-built package from release)
  publish-csharp:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_csharp == 'true')
    needs: [check-workflow, download-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Publish to NuGet
      run: |
        NUPKG=$(find packages -name "*.nupkg" -type f | head -n 1)
        if [ -z "$NUPKG" ]; then
          echo "‚ùå No NuGet package found in release"
          echo "Available files:"
          ls -lh packages/
          exit 1
        fi
        
        echo "Publishing: $(basename $NUPKG)"
        echo "Full path: $NUPKG"
        
        dotnet nuget push "$NUPKG" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  # Publish Web npm packages (using pre-built packages from release)
  publish-web:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_web == 'true')
    needs: [check-workflow, download-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Publish web packages to npm
      run: |
        echo "üì¶ Available release files:"
        ls -lh packages/
        echo ""
        
        # Find and publish all web-related .tgz packages (core, bundler, node)
        PUBLISHED=0
        
        # Look for web package tarballs (they should be directly in packages/)
        for pkg in packages/*.tgz; do
          # Skip React Native package
          if [[ "$pkg" == *"react-native"* ]]; then
            echo "Skipping React Native package: $(basename $pkg)"
            continue
          fi
          
          if [ -f "$pkg" ]; then
            echo ""
            echo "üì¶ Processing: $(basename $pkg)"
            echo "Full path: $pkg"
            
            # Verify the tarball is valid
            if ! tar -tzf "$pkg" > /dev/null 2>&1; then
              echo "‚ö†Ô∏è WARNING: Invalid tarball file, skipping: $pkg"
              continue
            fi
            
            # Extract and display package info
            mkdir -p /tmp/pkg-inspect
            tar -xzf "$pkg" -C /tmp/pkg-inspect package/package.json 2>/dev/null || true
            if [ -f /tmp/pkg-inspect/package/package.json ]; then
              PKG_NAME=$(grep -o '"name"[[:space:]]*:[[:space:]]*"[^"]*"' /tmp/pkg-inspect/package/package.json | cut -d'"' -f4)
              PKG_VERSION=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' /tmp/pkg-inspect/package/package.json | cut -d'"' -f4)
              echo "  üìã Package: $PKG_NAME@$PKG_VERSION"
            fi
            rm -rf /tmp/pkg-inspect
            
            # Publish
            echo "  üöÄ Publishing to npm..."
            npm publish "$pkg" --access public
            echo "  ‚úÖ Published successfully"
            PUBLISHED=$((PUBLISHED + 1))
          fi
        done
        
        if [ $PUBLISHED -eq 0 ]; then
          echo ""
          echo "‚ùå No web packages were published"
          echo ""
          echo "Expected to find: @json-eval-rs/webcore, @json-eval-rs/bundler, @json-eval-rs/node"
          echo "Available files in packages/:"
          ls -lh packages/
          echo ""
          echo "‚ö†Ô∏è Web packages should be directly in the packages/ directory"
          echo "   Check the build-bindings workflow's web-packages artifact"
          exit 1
        fi
        
        echo ""
        echo "‚úÖ Successfully published $PUBLISHED web package(s)"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish React Native npm package (using pre-built package from release)
  publish-react-native:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_react_native == 'true')
    needs: [check-workflow, download-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages/
    
    - name: Inspect and publish React Native package
      run: |
        RN_PKG=$(find packages -name "*react-native*.tgz" -type f | head -n 1)
        if [ -z "$RN_PKG" ]; then
          echo "‚ùå No React Native package found in release"
          echo "Available files:"
          ls -lh packages/
          exit 1
        fi
        
        echo "Publishing: $(basename $RN_PKG)"
        echo "Full path: $RN_PKG"
        
        # Verify the tarball is valid
        if ! tar -tzf "$RN_PKG" > /dev/null 2>&1; then
          echo "‚ùå ERROR: Invalid tarball file"
          exit 1
        fi
        
        # Extract and inspect package.json
        echo ""
        echo "üìã Inspecting package.json..."
        mkdir -p /tmp/inspect
        tar -xzf "$RN_PKG" -C /tmp/inspect package/package.json 2>/dev/null || true
        if [ -f /tmp/inspect/package/package.json ]; then
          echo "Package name: $(grep -o '"name"[[:space:]]*:[[:space:]]*"[^"]*"' /tmp/inspect/package/package.json | cut -d'"' -f4)"
          echo "Package version: $(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' /tmp/inspect/package/package.json | cut -d'"' -f4)"
          echo "First 20 lines of package.json:"
          head -20 /tmp/inspect/package/package.json
        fi
        
        echo ""
        echo "üöÄ Publishing to npm..."
        
        # Publish directly without path manipulation
        cd packages
        npm publish "$(basename $RN_PKG)" --access public --dry-run
        echo ""
        echo "Dry run successful, publishing for real..."
        npm publish "$(basename $RN_PKG)" --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish Rust crate to crates.io
  publish-crates-io:
    if: |
      needs.check-workflow.outputs.should_run == 'true' &&
      (github.event_name == 'workflow_run' || github.event.inputs.publish_crates_io == 'true')
    needs: [check-workflow]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Summary
  publish-summary:
    if: always()
    needs: [check-workflow, download-release-assets, publish-csharp, publish-web, publish-react-native, publish-crates-io]
    runs-on: ubuntu-latest
    
    steps:
    - name: Publish Summary
      run: |
        echo "## üì¶ Publish Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Tag" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ **${{ needs.check-workflow.outputs.release_tag }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| C# NuGet | ${{ needs.publish-csharp.result == 'success' && '‚úÖ' || needs.publish-csharp.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web npm | ${{ needs.publish-web.result == 'success' && '‚úÖ' || needs.publish-web.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| React Native npm | ${{ needs.publish-react-native.result == 'success' && '‚úÖ' || needs.publish-react-native.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Rust crates.io | ${{ needs.publish-crates-io.result == 'success' && '‚úÖ' || needs.publish-crates-io.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìù Note" >> $GITHUB_STEP_SUMMARY
        echo "All packages are published from pre-built artifacts in GitHub Release ${{ needs.check-workflow.outputs.release_tag }}." >> $GITHUB_STEP_SUMMARY
